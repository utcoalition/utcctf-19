BITS 64

section .bss
input resb 33

; flag = "utflag{pr33ty_garb0_vm_2.0}"
; strlen = 27
section .data
greetings db 'Enter the flag', 0xa
greetings_len equ $ - greetings

congrats db 'Correct', 0xa
congrats_len equ $ - congrats

failed db 'Incorrect', 0xa
failed_len equ $ - failed

key db 79, 98, 217, 100, 89, 152, 36, 88, 175, 152, 21, 42, 114, 54, 132, 172, 137, 81, 237, 127, 18, 84, 47, 112, 194, 153, 132, 51, 211, 252, 91, 7
stack:
	dq junk
	dq 0x3
	db 13, 34, 32

	dq antidebug

	dq junk
	dq 0x4
	db 40, 34, 10, 3

	dq write
	dq greetings
	dq greetings_len
	dq read
	dq input
	dq 33

	dq junk
	dq 0x8
	dq 0x40078


	dq pop_rsi
	dq key

	dq pop_rdi
	dq input
; START HERE
	dq deref_rsi_rax
	dq deref_rdi_rbx
	dq xor_rbx
	dq 0x3a
	dq check
	dq inc_rsi
	dq junk
	dq 0x11
	db 0x1e,0x40,0x74,0x88,0x57,0x52,0x11,0xe6,0x6d,0x6d,0x4f,0x6c,0x5c,0x21,0x0,0x47,0xe8
	dq inc_rdi

	dq deref_rsi_rax
	dq junk
	dq 0x6
	db 0x2c,0xc5,0x93,0x12,0x90,0x39
	dq deref_rdi_rbx
	dq xor_rbx
	dq 0x16
	dq check
	dq inc_rsi
	dq junk
	dq 0xe
	db 0x36,0x47,0x6f,0xe3,0xeb,0xba,0x61,0xb6,0x70,0x29,0xeb,0x3c,0x5b,0x52
	dq inc_rdi

	dq junk
	dq 0x8
	db 0x81,0xa8,0xa8,0x91,0xdc,0xb8,0xc8,0xcf
	dq deref_rsi_rax
	dq junk
	dq 0x12
	db 0xab,0x90,0xfb,0xaf,0x18,0x87,0x30,0xdd,0x41,0xf6,0xf2,0x70,0x6b,0x81,0xd1,0x66,0xb9,0x1f
	dq deref_rdi_rbx
	dq xor_rbx
	dq 0xba
	dq check
	dq junk
	dq 0x12
	db 0x92,0xba,0x5a,0xa8,0xff,0x42,0xc6,0xa1,0x9f,0x10,0xbd,0x60,0xc5,0x5a,0xc1,0xd9,0x72,0x9c
	dq inc_rsi
	dq junk
	dq 0x3
	db 0x60,0x90,0x17
	dq inc_rdi

	dq deref_rsi_rax
	dq deref_rdi_rbx
	dq xor_rbx
	dq 0x1f
	dq check
	dq inc_rsi
	dq junk
	dq 0xc
	db 0xf,0xde,0x62,0x2a,0x34,0x54,0x68,0xbf,0x5,0x86,0xbd,0xa8
	dq inc_rdi

	dq deref_rsi_rax
	dq deref_rdi_rbx
	dq xor_rbx
	dq 0x2a
	dq check
	dq inc_rsi
	dq inc_rdi

	dq junk
	dq 0xa
	db 0xf2,0xf0,0xea,0x4d,0x8f,0xe0,0xb8,0x7a,0x39,0x29
	dq deref_rsi_rax
	dq deref_rdi_rbx
	dq xor_rbx
	dq 0xec
	dq check
	dq inc_rsi
	dq inc_rdi

	dq junk
	dq 0x10
	db 0xba,0xb3,0xb7,0xa1,0xea,0x66,0x87,0x3a,0xac,0xad,0x5c,0x6,0xd4,0xbc,0xeb,0x2b
	dq deref_rsi_rax
	dq deref_rdi_rbx
	dq xor_rbx
	dq 0x65
	dq check
	dq inc_rsi
	dq inc_rdi

	dq junk
	dq 0xe
	db 0xe3,0x90,0x9f,0xd1,0xb1,0x40,0x37,0xda,0x6,0x82,0x5,0x73,0xf1,0x7b
	dq deref_rsi_rax
	dq deref_rdi_rbx
	dq xor_rbx
	dq 0x3b
	dq check
	dq junk
	dq 0x9
	db 0x96,0xce,0xfd,0xc8,0x2e,0x14,0xbd,0x13,0x12
	dq inc_rsi
	dq inc_rdi

	dq junk
	dq 0x10
	db 0x71,0xb5,0x26,0x58,0x98,0x8b,0xdf,0xbf,0x20,0x53,0xc1,0x48,0xbe,0xb1,0x50,0x7
	dq deref_rsi_rax
	dq deref_rdi_rbx
	dq xor_rbx
	dq 0xc4
	dq check
	dq inc_rsi
	dq inc_rdi

	dq deref_rsi_rax
	dq deref_rdi_rbx
	dq junk
	dq 0x10
	db 0x7e,0xbb,0xcf,0x8f,0xad,0x6f,0x7b,0x15,0x5b,0x83,0x63,0x3e,0x2a,0xd8,0x79,0xad
	dq xor_rbx
	dq 0xeb
	dq check
	dq junk
	dq 0x5
	db 0x1d,0x75,0x2c,0x3d,0x52
	dq inc_rsi
	dq inc_rdi

	dq junk
	dq 0x9
	db 0x3,0x73,0x5,0x2e,0xe,0x7f,0x33,0xee,0x43
	dq deref_rsi_rax
	dq junk
	dq 0x10
	db 0x32,0x8d,0x7f,0x22,0x1c,0x5e,0x88,0xab,0x54,0x63,0x33,0x60,0x40,0x49,0xf1,0x99
	dq deref_rdi_rbx
	dq junk
	dq 0x10
	db 0x8c,0x99,0x31,0xd7,0x4e,0x74,0x1a,0x74,0x55,0x53,0x79,0x99,0x4,0x26,0x6b,0x52
	dq xor_rbx
	dq 0x4a
	dq check
	dq inc_rsi
	dq inc_rdi

	dq junk
	dq 0x8
	db 0x2e,0xd6,0x7c,0x24,0x98,0x2c,0xf5,0x91
	dq deref_rsi_rax
	dq deref_rdi_rbx
	dq xor_rbx
	dq 0x6b
	dq check
	dq inc_rsi
	dq junk
	dq 0xd
	db 0x9f,0xd9,0xa9,0xf4,0xac,0xd0,0x8f,0x9e,0xa0,0x9c,0xcc,0x7e,0x24
	dq inc_rdi

	dq deref_rsi_rax
	dq junk
	dq 0x14
	db 0x9e,0x85,0x63,0xad,0xcf,0xe5,0x3d,0x21,0x9b,0xfa,0x70,0x2,0x2e,0x56,0xd0,0x1,0x45,0x9c,0x75,0x83
	dq deref_rdi_rbx
	dq xor_rbx
	dq 0x0
	dq check
	dq inc_rsi
	dq inc_rdi

	dq deref_rsi_rax
	dq deref_rdi_rbx
	dq junk
	dq 0x4
	db 0x48,0x9f,0xb8,0xf4
	dq xor_rbx
	dq 0x5
	dq junk
	dq 0x2
	db 0xa7,0x25
	dq check
	dq inc_rsi
	dq inc_rdi

	dq deref_rsi_rax
	dq deref_rdi_rbx
	dq xor_rbx
	dq 0xdb
	dq check
	dq inc_rsi
	dq inc_rdi

	dq junk
	dq 0xe
	db 0x8c,0x1,0xa4,0x39,0x26,0x36,0x8d,0xc5,0x2,0xf3,0x48,0x19,0x78,0xee
	dq deref_rsi_rax
	dq deref_rdi_rbx
	dq xor_rbx
	dq 0xfb
	dq check
	dq inc_rsi
	dq inc_rdi

	dq deref_rsi_rax
	dq deref_rdi_rbx
	dq junk
	dq 0xb
	db 0x0,0x1d,0x7,0xb7,0x7d,0xf,0xd6,0x49,0xb7,0x51,0xb5
	dq xor_rbx
	dq 0xc8
	dq junk
	dq 0xb
	db 0x74,0x25,0x31,0xd1,0x63,0xe5,0xe3,0x3d,0xcb,0xa0,0x46
	dq check
	dq junk
	dq 0x8
	db 0xe6,0x85,0x13,0x7,0x9f,0x83,0x1b,0xd
	dq inc_rsi
	dq inc_rdi

	dq deref_rsi_rax
	dq junk
	dq 0xd
	db 0x22,0x3,0x5c,0x78,0x16,0xcd,0x12,0x7f,0x2a,0x97,0x9c,0xf4,0xd9
	dq deref_rdi_rbx
	dq xor_rbx
	dq 0x12
	dq junk
	dq 0x8
	db 0x22,0x98,0x6d,0x47,0xbd,0xb1,0x4,0x0
	dq check
	dq inc_rsi
	dq inc_rdi

	dq junk
	dq 0x8
	db 0x9c,0xce,0xb4,0xba,0x75,0xa0,0xab,0xe3
	dq deref_rsi_rax
	dq deref_rdi_rbx
	dq junk
	dq 0xd
	db 0x6d,0xfb,0x32,0x3f,0x7,0x5,0x7e,0xbc,0xf5,0xbd,0xbc,0xd2,0x79
	dq xor_rbx
	dq 0xa6
	dq check
	dq inc_rsi
	dq inc_rdi

	dq deref_rsi_rax
	dq junk
	dq 0x11
	db 0xa4,0x9c,0x27,0x95,0x7f,0xf3,0x99,0x58,0xd0,0x35,0xb1,0xd2,0x9,0x72,0x62,0x93,0x52
	dq deref_rdi_rbx
	dq xor_rbx
	dq 0x5e
	dq junk
	dq 0xd
	db 0xd1,0xdc,0xd6,0xb2,0xe8,0xb5,0xad,0x2e,0xf2,0xbb,0xbe,0x8d,0x6b
	dq check
	dq inc_rsi
	dq inc_rdi

	dq deref_rsi_rax
	dq junk
	dq 0x2
	db 0x32,0x81
	dq deref_rdi_rbx
	dq xor_rbx
	dq 0x33
	dq check
	dq inc_rsi
	dq inc_rdi

	dq deref_rsi_rax
	dq deref_rdi_rbx
	dq junk
	dq 0x12
	db 0xa9,0xa8,0x7,0x20,0xc2,0x3,0x47,0x92,0x5f,0xe3,0x88,0xaa,0xf8,0xaf,0x63,0x79,0x26,0x5
	dq xor_rbx
	dq 0x75
	dq check
	dq inc_rsi
	dq inc_rdi

	dq deref_rsi_rax
	dq deref_rdi_rbx
	dq xor_rbx
	dq 0x70
	dq check
	dq inc_rsi
	dq inc_rdi

	dq deref_rsi_rax
	dq deref_rdi_rbx
	dq junk
	dq 0x2
	db 0x5a,0x90
	dq xor_rbx
	dq 0x38
	dq junk
	dq 0xc
	db 0xe6,0xb8,0x2d,0x30,0x42,0xd0,0xd8,0xec,0x3c,0x19,0xb3,0x15
	dq check
	dq inc_rsi
	dq inc_rdi

	dq deref_rsi_rax
	dq junk
	dq 0x13
	db 0x57,0xc,0xa5,0xd2,0x2f,0xdd,0xfb,0x23,0x13,0x3b,0x63,0x36,0x45,0x59,0xc4,0x16,0x76,0x74,0xd9
	dq deref_rdi_rbx
	dq xor_rbx
	dq 0x87
	dq junk
	dq 0x14
	db 0x13,0x76,0xd5,0x36,0xb2,0x10,0x48,0x5c,0xa4,0xb8,0x9a,0x6e,0xae,0x79,0xf1,0xd6,0xd0,0x8d,0x8e,0x8c
	dq check
	dq inc_rsi
	dq inc_rdi

	dq junk
	dq 0x3
	db 0x37,0x78,0x26
	dq deref_rsi_rax
	dq deref_rdi_rbx
	dq junk
	dq 0x6
	db 0xe8,0x71,0x13,0x49,0xba,0x51
	dq xor_rbx
	dq 0xd1
	dq check
	dq inc_rsi
	dq inc_rdi

	dq deref_rsi_rax
	dq junk
	dq 0x7
	db 0xfe,0x4b,0xd6,0xf4,0xc,0x5c,0x44
	dq deref_rdi_rbx
	dq xor_rbx
	dq 0xc1
	dq junk
	dq 0x4
	db 0x34,0x65,0x20,0xf9
	dq check
	dq inc_rsi
	dq inc_rdi

	dq deref_rsi_rax
	dq deref_rdi_rbx
	dq junk
	dq 0x6
	db 0xc9,0xe,0xd7,0xe6,0xcb,0x7f
	dq xor_rbx
	dq 0x6b
	dq junk
	dq 0x3
	db 0xbd,0xfc,0x93
	dq check
	dq inc_rsi
	dq inc_rdi

	dq deref_rsi_rax
	dq junk
	dq 0xd
	db 0xae,0x9,0xc6,0x82,0x6d,0xa8,0x38,0xd9,0xe7,0x9,0x46,0xbf,0x67
	dq deref_rdi_rbx
	dq xor_rbx
	dq 0x97
	dq check
	dq inc_rsi
	dq junk
	dq 0xc
	db 0x8f,0xb5,0x3d,0x14,0x38,0xfc,0x3,0xad,0x28,0xe3,0x97,0xb9
	dq inc_rdi

	dq deref_rsi_rax
	dq junk
	dq 0x13
	db 0x16,0x32,0xd9,0xc0,0xa4,0x2,0x72,0xcc,0xf9,0x1e,0x64,0xcc,0x6a,0x88,0x1,0x34,0x2d,0x34,0xaf
	dq deref_rdi_rbx
	dq xor_rbx
	dq 0xa4
	dq check
	dq inc_rsi
	dq inc_rdi

	dq deref_rsi_rax
	dq junk
	dq 0x6
	db 0x36,0xbe,0x77,0x43,0xcf,0x78
	dq deref_rdi_rbx
	dq xor_rbx
	dq 0x1f
	dq check
	dq inc_rsi
	dq inc_rdi

	dq junk
	dq 0xd
	db 0x47,0xf5,0xd5,0xea,0x16,0xfc,0xea,0x1b,0x4c,0xb0,0xc4,0x58,0x75
	dq deref_rsi_rax
	dq deref_rdi_rbx
	dq xor_rbx
	dq 0x7a
	dq check
	dq inc_rsi
	dq junk
	dq 0xd
	db 0xd3,0x1f,0xcc,0x1d,0xc3,0xe5,0x1d,0xbf,0x94,0x47,0xb2,0xb7,0xbb
	dq inc_rdi

	dq junk
	dq 0x8
	db 0xa7,0x19,0x68,0x11,0xf3,0xe5,0x6f,0xe8
; END HERE
	dq write
	dq congrats
	dq congrats_len
	dq finish

section .text
global _start

_start:
	mov rcx, stack
	mov rdx, [rcx]
	lea rcx, [rcx + 8]
	jmp rdx


push_rbx:

	mov r8, [rcx]
	lea rcx, [rcx + 8]
	
	lea rcx, [rcx - 8]
	mov [rcx], rbx
	
	jmp r8


deref_rsi_rax:
	mov ah, byte [rsi]
	jmp act_fini


deref_rdi_rbx:
	mov bh, byte [rdi]
	jmp act_fini

xor_rbx:
	mov dh, byte [rcx]
	lea rcx, [rcx + 8]
	
	xor bh, dh

	mov rdx, [rcx]
	lea rcx, [rcx + 8]
	jmp rdx

inc_rsi:
	inc rsi
	jmp act_fini

inc_rdi:
	inc rdi
	jmp act_fini

pop_rdi:
	mov rdi, [rcx]
	lea rcx, [rcx + 8]

	mov rdx, [rcx]
	lea rcx, [rcx + 8]
	jmp rdx

pop_rsi:
	mov rsi, [rcx]
	lea rcx, [rcx + 8]

	mov rdx, [rcx]
	lea rcx, [rcx + 8]
	jmp rdx

check:
	;mov rax, [rcx]
	;lea rcx, [rcx + 8]

	;mov rsi, [rcx]
	;lea rcx, [rcx + 8]

	sub bh, ah
	je gucci
	jmp exit_bad
gucci:
	mov rdx, [rcx]
	lea rcx, [rcx + 8]
	jmp rdx

write:
	mov rsi, [rcx]
	lea rcx, [rcx + 8]
	mov rdx, [rcx]
	lea rcx, [rcx + 8]
	mov rdi, 0x1
	mov rax, 1

	push rcx
	syscall
	pop rcx

	mov rdx, [rcx]
	lea rcx, [rcx + 8]
	jmp rdx

read:
	mov rsi, [rcx]
	lea rcx, [rcx + 8]
	mov rdx, [rcx]
	lea rcx, [rcx + 8]
	mov rdi, 0
	mov rax, 0

	push rcx
	syscall
	pop rcx
	
	mov rdx, [rcx]
	lea rcx, [rcx + 8]
	jmp rdx

exit_bad:
	
	lea rcx, [rcx - 8]
	mov qword [rcx], finish

	lea rcx, [rcx - 8]
	mov qword [rcx], failed_len	

	lea rcx, [rcx - 8]	
	mov qword [rcx], failed 

	jmp write	
finish:
	mov rax, 60
	mov rdi, 1
	syscall


act_fini:
	mov rdx, [rcx]
	lea rcx, [rcx + 8]
	jmp rdx

antidebug:
	push rcx
	mov rdi, 0
	mov rsi, 0
	mov rdx, 1
	mov r10, 0
	mov rax, 101
	syscall
	mov rbx, 0xFFFFFFFFFFFFFFFF
	cmp rax, rbx
	jne good
	jmp finish
good:
	pop rcx
	jmp act_fini

	
junk:
	mov r10, [rcx]
	lea rcx, [rcx + 8]
	add rcx, r10
	jmp act_fini





